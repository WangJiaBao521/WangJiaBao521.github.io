<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>念觉</title>
  
  <subtitle>jys</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-08T13:49:09.176Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>安徒生</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>反射/代理</title>
    <link href="http://yoursite.com/2020/10/08/%E5%8F%8D%E5%B0%84-%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2020/10/08/%E5%8F%8D%E5%B0%84-%E4%BB%A3%E7%90%86/</id>
    <published>2020-10-08T13:45:35.000Z</published>
    <updated>2020-10-08T13:49:09.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="反射详解"><a href="#反射详解" class="headerlink" title="反射详解"></a>反射详解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* 常用相关api:</span><br><span class="line">*   java.<span class="keyword">long</span>.Class: 代表一个类  ---test3()</span><br><span class="line">*       <span class="number">1</span>.类的加载过程:   程序执行javac.exe命令以后，会生成一个或多个字节码文件(.class文件)。</span><br><span class="line">* 接着使用java.exe命令对某个字节码文件进行解释运行，相当于某个字节码文件加载到内存中。此过程就称为</span><br><span class="line">* 类的加载。加载到内存中的类，我i们成为运行时类，此运行时类，就作为一个Class的一个实列</span><br><span class="line">*       <span class="number">2</span>.Class实例也就是一个运行时类</span><br><span class="line">*       <span class="number">3</span>.加载到内存的运行时类，会缓存一段时间，在此时间内我们可以通过不同的方式来获取此运行时类</span><br><span class="line">*   java.<span class="keyword">long</span>.reflet.Method: 代表类的方法</span><br><span class="line">*   java.<span class="keyword">long</span>.reflet.Field: 代表类的成员变量</span><br><span class="line">*   java.<span class="keyword">long</span>.reflet.Constructor:代表类的构造器</span><br></pre></td></tr></table></figure><p>疑问:</p><p> &emsp;&emsp;什么时候用反射?<br> &emsp;&emsp;编译时期确定不了用哪个类的对象 （servlet 中的体现，根据前端请求确认用户执行那些操作（例如：登陆，注册）创建相关对象）</p><font dace="黑体" color="red" size="3">创建类的对象的几种方式：</font><p>&emsp;&emsp;1)new +构造器</p><p>&emsp;&emsp;2)类本身或工具类提供的静态方法创建对象</p><p>&emsp;&emsp;3)反射</p><h5 id="获取Class实例的几种方式"><a href="#获取Class实例的几种方式" class="headerlink" title="获取Class实例的几种方式"></a>获取Class实例的几种方式</h5><h6 id="方式一：调用运行时类的属性"><a href="#方式一：调用运行时类的属性" class="headerlink" title="方式一：调用运行时类的属性"></a>方式一：调用运行时类的属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Person&gt; class1 = Person.class;</span><br><span class="line">System.out.println(class1);<span class="comment">//输出Person类本身----&gt;class cn.itcast.base.Person</span></span><br></pre></td></tr></table></figure><h6 id="方式二：通过运行时对象"><a href="#方式二：通过运行时对象" class="headerlink" title="方式二：通过运行时对象"></a>方式二：通过运行时对象</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">Class class2 = p1.getClass();</span><br><span class="line">System.out.println(class2);<span class="comment">//class cn.itcast.base.Person</span></span><br></pre></td></tr></table></figure><h6 id="方式三：调用Class的静态方法-推荐"><a href="#方式三：调用Class的静态方法-推荐" class="headerlink" title="方式三：调用Class的静态方法 (推荐)"></a>方式三：调用Class的静态方法 (推荐)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class class3 = Class.forName(<span class="string">"cn.itcast.base.Person"</span>);<span class="comment">//类的全类名</span></span><br><span class="line">System.out.println(class3);<span class="comment">//class cn.itcast.base.Person</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//比较发现运行时类是同一个</span></span><br><span class="line">System.out.println(class1 == class2);<span class="comment">//true</span></span><br><span class="line">System.out.println(class1 == class3);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h6 id="方式四-调用类的加载器加载ClassLoader-了解"><a href="#方式四-调用类的加载器加载ClassLoader-了解" class="headerlink" title="方式四 调用类的加载器加载ClassLoader (了解)"></a>方式四 调用类的加载器加载ClassLoader (了解)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader classLoader = ReflexTest.class.getClassLoader();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class class4 = classLoader.loadClass(<span class="string">"cn.itcast.base.Person"</span>);</span><br><span class="line">    System.out.println(class4);<span class="comment">////class cn.itcast.base.Person</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射操作"><a href="#反射操作" class="headerlink" title="反射操作"></a>反射操作</h3><h4 id="Person基类："><a href="#Person基类：" class="headerlink" title="Person基类："></a>Person基类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span>   <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"private void"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Person person = (Person) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != person.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(person.name) : person.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Persion&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过反射Person的操作："><a href="#通过反射Person的操作：" class="headerlink" title="通过反射Person的操作："></a>通过反射Person的操作：</h4><h5 id="1-通过反射创建Person对象"><a href="#1-通过反射创建Person对象" class="headerlink" title="1)通过反射创建Person对象"></a>1)通过反射创建Person对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">Constructor&lt;Person&gt; constructor = personClass.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">Person person = constructor.newInstance(<span class="string">"antusheng"</span>, <span class="number">18</span>);</span><br><span class="line">System.out.println(person.toString()); <span class="comment">//Persion&#123;name='antusheng', age=18&#125;</span></span><br></pre></td></tr></table></figure><h5 id="2-通过反射调用对象指定的方法，属性"><a href="#2-通过反射调用对象指定的方法，属性" class="headerlink" title="2)通过反射调用对象指定的方法，属性"></a>2)通过反射调用对象指定的方法，属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Field age = personClass.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">age.set(person,<span class="number">21</span>);</span><br><span class="line">System.out.println(person.toString()); <span class="comment">//Persion&#123;name='antusheng', age=21&#125;</span></span><br><span class="line"> <span class="comment">//调用方法</span></span><br><span class="line">Method setName = personClass.getDeclaredMethod(<span class="string">"setName"</span>, String.class);</span><br><span class="line"> <span class="comment">//如果调用的方法没有返回值，此invoke返回null</span></span><br><span class="line">setName.invoke(person,<span class="string">"安徒生"</span>);</span><br><span class="line">System.out.println(person.toString());<span class="comment">//Persion&#123;name='安徒生', age=21&#125;</span></span><br></pre></td></tr></table></figure><h5 id="3-调用私有构造器"><a href="#3-调用私有构造器" class="headerlink" title="3)调用私有构造器"></a>3)调用私有构造器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;Person&gt; cons1 = personClass.getDeclaredConstructor(String.class);</span><br><span class="line">cons1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Person p1=cons1.newInstance(<span class="string">"Tom"</span>);</span><br><span class="line">System.out.println(p1);<span class="comment">//Persion&#123;name='Tom', age=0&#125;</span></span><br></pre></td></tr></table></figure><h5 id="4-调用私有属性"><a href="#4-调用私有属性" class="headerlink" title="4)调用私有属性"></a>4)调用私有属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Field name = personClass.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line"><span class="comment">//属性是private的，设置为true保证属性可访问</span></span><br><span class="line">name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">name.set(p1,<span class="string">"安徒生jy"</span>);</span><br><span class="line">System.out.println(p1);<span class="comment">//Persion&#123;name='安徒生jy', age=0&#125;</span></span><br></pre></td></tr></table></figure><h5 id="5-调用私有方法"><a href="#5-调用私有方法" class="headerlink" title="5)调用私有方法"></a>5)调用私有方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Method hello = personClass.getDeclaredMethod(<span class="string">"hello"</span>);</span><br><span class="line">hello.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">hello.invoke(p1);<span class="comment">//private void</span></span><br></pre></td></tr></table></figure><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>&emsp;&emsp;<font dace="黑体" color="red" size="3">代理设计模式原理： 使用一个代理将对象包装起来，然后该代理类对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用到原始对象</font></p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>代理类和被代理类在编译期间都确定下来。</p><p>接口定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ClohtFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">produceCloth</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义代理类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ProxyClothFactory</span> <span class="keyword">implements</span> <span class="title">ClohtFactory</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ClohtFactory factory;  <span class="comment">//用被代理对象进行实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">ProxyClothFactory</span><span class="params">(ClohtFactory clohtFactory)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory=clohtFactory;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理工厂准备一些准备工作"</span>);</span><br><span class="line"></span><br><span class="line">        factory.produceCloth();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"代理工厂做后续的一些工作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NikeClothFactory</span> <span class="keyword">implements</span> <span class="title">ClohtFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Nike工厂生产一批新款运动服装"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行静态代理测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxyTest</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建代理类对象</span></span><br><span class="line">        NikeClothFactory nike=<span class="keyword">new</span> NikeClothFactory();</span><br><span class="line">        <span class="comment">//创建被代理类对象</span></span><br><span class="line">        ProxyClothFactory proxyClothF=<span class="keyword">new</span> ProxyClothFactory(nike);</span><br><span class="line">        proxyClothF.produceCloth();</span><br><span class="line">        <span class="comment">//代理工厂准备一些准备工作</span></span><br><span class="line"><span class="comment">//Nike工厂生产一批新款运动服装</span></span><br><span class="line"><span class="comment">//代理工厂做后续的一些工作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>在程序运行时确定代理对象，通过反射获得运行时类创建代理类。</p><p>接口定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getBelief</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ear</span><span class="params">(String food)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被代理类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">implements</span>  <span class="title">Human</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBelief</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我相信自己"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ear</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我喜欢吃"</span>+food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现动态代理需要解决问题：</p><p>1)如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象？<br>2)当通过代理类的对象调用方法时，如何动态的取调用被代理类的同名方法？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用此方法。返回一个代理类对象，解决问题一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        MyInvocationHandler myHandler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">        myHandler.bind(obj);</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),myHandler);</span><br><span class="line">    &#125;<span class="comment">//通过Proxy类的静态方法newProxyInstance返回一个接口的代理实例。针对不同的代理类，传入相应的代理程序控制器InvocationHandler</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建 MyInvocationHandler实现InvocationHandler接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object object; <span class="comment">//需要使用被代理类对象进行赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">bind</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.object=object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当通过代理类的对象调用某个方法x时，就会自动调用如下的方法:invoke()方法</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法x要执行的功能声明在invoke中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理类对象调用的方法，此方法也作为被代理类对象调用的方法</span></span><br><span class="line">        <span class="comment">//object 本身就是被代理对象</span></span><br><span class="line">        Object returnInvoke = method.invoke(object, args);</span><br><span class="line">        <span class="comment">//上述方法的返回值就作为当前类的invoke()方法的返回值</span></span><br><span class="line">        <span class="keyword">return</span> returnInvoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态代理测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SuperMan superMan = <span class="keyword">new</span> SuperMan();</span><br><span class="line">    <span class="comment">//Object proxyInstance = ProxyFactory.getProxyInstance(superMan);</span></span><br><span class="line">    Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan);</span><br><span class="line">    String belief = proxyInstance.getBelief();</span><br><span class="line">    System.out.println(belief);</span><br><span class="line">    proxyInstance.ear(<span class="string">"烤肉"</span>);</span><br><span class="line"><span class="comment">/*我相信自己</span></span><br><span class="line"><span class="comment">  我喜欢吃烤肉*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h2&gt;&lt;h3 id=&quot;反射详解&quot;&gt;&lt;a href=&quot;#反射详解&quot; class=&quot;headerlink&quot; title=&quot;反射详解&quot;&gt;&lt;/a&gt;反射详解&lt;/h
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中常用集合分类及其常用方法</title>
    <link href="http://yoursite.com/2020/09/30/Java%E4%B8%AD%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88%E5%88%86%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/09/30/Java%E4%B8%AD%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88%E5%88%86%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2020-09-30T05:52:43.000Z</published>
    <updated>2020-09-30T06:21:20.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p><img src="/2020/09/30/Java中常用集合分类及其常用方法/Conllection.png" alt="Collection 继承图"></p><h3 id="List-有序-可重复"><a href="#List-有序-可重复" class="headerlink" title="List(有序,可重复)"></a>List(有序,可重复)</h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>​    ArrayList集合(详细转向<a href="/2020/09/23/Array-ArrarList-常用方法/">Array/ArrarList</a> 常用方法)</p><p>​    特点：</p><p>​    1.数字长度可以任意变化</p><p>​    2.<e>代表泛型，泛型也就是装在集合中的所有元素，全部都是统一的某种类型</e></p><p>​    注意：泛型只能是引用类型不能是基本类型</p><p>​    3.对于ArrayList来说直接打印的得到的不是地址值而是内容，如果内容为空则打印[]</p><p>​    ArrayList 底层是数据存储结构是数组，元素增删慢，查询快；</p><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>​    java.util.LinkList 集合 implements List<br>​    LinkList 集合 存储的结构是链表结构，查询慢，增删快<br>​    包含大量操作首尾元素方法：<br>​    public void addFirst(E e):将指定元素插入此列表的开头<br>​    public void addLast(E e):将指定元素插入此列表的结尾<br>​    public void push(E e):将此元素推入此列表表示的堆栈</p><p>​    public E getFirst():返回列表的第一个元素<br>​    public E getLast():返回列表的最后一个元素</p><p>​    public E removeFirst(E e):移除列表的第一个元素，并返回该元素<br>​    public E removeLast(E e):移除列表的最后一个元素，并返回该元素<br>​    public E pop():从此列表表示的堆栈处返回一个元素</p><p>​    public boolean isEmpty(): 如果此列表为空返回true</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;String&gt; linkedList=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">linkedList.addFirst(<span class="string">"a"</span>); <span class="comment">//将指定元素插入此列表的开头</span></span><br><span class="line">linkedList.addLast(<span class="string">"d"</span>); <span class="comment">//将指定元素插入此列表的结尾</span></span><br><span class="line">linkedList.push(<span class="string">"c"</span>); <span class="comment">//等效于addFirst</span></span><br><span class="line">System.out.println(linkedList);  <span class="comment">//[c,a,d] 并不是地址值，重写了toString方法</span></span><br><span class="line">String str1=linkedList.getFirst(); <span class="comment">//返回列表的第一个元素</span></span><br><span class="line">System.out.println(str1); <span class="comment">//c</span></span><br><span class="line">String str2=linkedList.getLast(); <span class="comment">//返回列表的最后一个元素</span></span><br><span class="line">System.out.println(str2); <span class="comment">//d</span></span><br><span class="line"></span><br><span class="line">String str3=linkedList.removeFirst(); <span class="comment">//移除列表的第一个元素，并返回该元素</span></span><br><span class="line">System.out.println(str3); <span class="comment">//c</span></span><br><span class="line">String str4=linkedList.removeLast(); <span class="comment">//移除列表的最后一个元素，并返回该元素</span></span><br><span class="line">System.out.println(str4); <span class="comment">//d</span></span><br><span class="line">String str5=linkedList.pop(); <span class="comment">//从此列表表示的堆栈处返回一个元素，本质出栈(移除)是第一个</span></span><br><span class="line">System.out.println(str5); <span class="comment">//a</span></span><br><span class="line">System.out.println(linkedList.isEmpty()); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Set（无序-唯一）"><a href="#Set（无序-唯一）" class="headerlink" title="Set（无序,唯一）"></a>Set（无序,唯一）</h3><p> java.util.Set extends Collection<br>     Set接口的特点:<br>     1.不允许重复元素<br>     2.没有索引，没有带索引的方法，不能用for循环</p><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>java.util.HashSet extends Set<br>    特点:<br>      包含set特点<br>      1.是一个无序元素集合，存储元素和取出元素的顺序可能不一致<br>      2.底层是一个哈希结构表(存取速度快)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Integer&gt; hashSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="comment">//通过add添加元素</span></span><br><span class="line">hashSet.add(<span class="number">54</span>);</span><br><span class="line">hashSet.add(<span class="number">45</span>);</span><br><span class="line">hashSet.add(<span class="number">88</span>);</span><br><span class="line"><span class="comment">//通过迭代器遍历set集合元素</span></span><br><span class="line">Iterator&lt;Integer&gt; iterator = hashSet.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    System.out.println(iterator.next());<span class="comment">// 54 45 88</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增强for遍历set集合(底层还是迭代器)</span></span><br><span class="line"><span class="keyword">for</span> (Integer integer : hashSet) &#123;</span><br><span class="line">    System.out.println(integer); <span class="comment">// 54 45 88</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HashCode"><a href="#HashCode" class="headerlink" title="HashCode"></a>HashCode</h4><p>哈希值:是一个十进制的整数，由系统随机给出。(就是对象的地址值，是一个逻辑地址，是模拟出来得到地址，不是实际的物理地址)<br>在Object类有一个方法可以获得对象的哈希值<br>     int hashCode(); 返回对象的哈希值码<br>HashCode方法的源码:<br>          public native int hashCode();<br>          native 代表该方法调用的是本地操作系统的方法<br>          Object的toString()输出的也是哈希值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">bject object=<span class="keyword">new</span> Object();</span><br><span class="line">System.out.println(object.hashCode());<span class="comment">//22307196</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String类重写了hashCode() 方法</span></span><br><span class="line">String s1=<span class="string">"abc"</span>;</span><br><span class="line">String s2=<span class="string">"abc"</span>;</span><br><span class="line">System.out.println(s1.hashCode()); <span class="comment">//96354</span></span><br><span class="line">System.out.println(s2.hashCode()); <span class="comment">//96354</span></span><br><span class="line">System.out.println(<span class="string">"重地"</span>.hashCode()); <span class="comment">//1179395</span></span><br><span class="line">System.out.println(<span class="string">"通话"</span>.hashCode()); <span class="comment">////1179395</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HashSet使用HashCode对比元素，不允许重复</span></span><br><span class="line">HashSet&lt;String&gt; hashSet=<span class="keyword">new</span> HashSet();</span><br><span class="line">hashSet.add(s1);</span><br><span class="line">hashSet.add(s2);</span><br><span class="line">hashSet.add(<span class="string">"通话"</span>);</span><br><span class="line">hashSet.add(<span class="string">"重地"</span>);</span><br><span class="line">System.out.println(hashSet); <span class="comment">//[通话, 重地, abc]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HashSet 存储自定义类型 要求重写equals()和hashCOde() 方法</span></span><br><span class="line">HashSet&lt;Persion&gt; hashSet1=<span class="keyword">new</span> HashSet();</span><br><span class="line">Persion p1=<span class="keyword">new</span> Persion(<span class="string">"安徒生"</span>,<span class="number">20</span>);</span><br><span class="line">Persion p2=<span class="keyword">new</span> Persion(<span class="string">"安徒生"</span>,<span class="number">20</span>);</span><br><span class="line">Persion p3=<span class="keyword">new</span> Persion(<span class="string">"安徒生"</span>,<span class="number">22</span>);</span><br><span class="line">hashSet1.add(p1);</span><br><span class="line">hashSet1.add(p2);</span><br><span class="line">hashSet1.add(p3);</span><br><span class="line">System.out.println(hashSet1);</span><br><span class="line"><span class="comment">//[Persion&#123;name='安徒生', age=20&#125;,Persion&#123;name='安徒生', age=22&#125;, Persion&#123;name='安徒生', age=20&#125;]</span></span><br><span class="line"><span class="comment">//没有重写equals() 和 hashcode()方法</span></span><br><span class="line">System.out.println(p1.hashCode()); <span class="comment">//10568834</span></span><br><span class="line">System.out.println(p2.hashCode()); <span class="comment">//21029277</span></span><br><span class="line">System.out.println(p3.hashCode()); <span class="comment">//24324022</span></span><br><span class="line">System.out.println(p1.equals(p2)); <span class="comment">//false</span></span><br><span class="line"><span class="comment">//在Persion类中重写equals和hashCode方法后</span></span><br><span class="line">System.out.println(p1.equals(p2)); <span class="comment">//true</span></span><br><span class="line">System.out.println(p1.hashCode()); <span class="comment">//722533822</span></span><br><span class="line">System.out.println(p2.hashCode()); <span class="comment">//722533822</span></span><br><span class="line">System.out.println(p3.hashCode()); <span class="comment">//722533824</span></span><br><span class="line">System.out.println(hashSet1); <span class="comment">//[Persion&#123;name='安徒生', age=22&#125;, Persion&#123;name='安徒生', age=20&#125;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//persion 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Persion</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Persion persion = (Persion) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != persion.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(persion.name) : persion.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Persion&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Persion</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Persion</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><p>java.util.linkedHashSet 集合 extend HashSet集合     </p><p>LinkedHashSet: 底层是一个哈希表(数组+链表/红黑树)+链表:多了一条链表(记录元素的存储顺序),保证元素有序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;String&gt; linkedSet=<span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">linkedSet.add(<span class="string">"www"</span>);</span><br><span class="line">linkedSet.add(<span class="string">"iiswho"</span>);</span><br><span class="line">linkedSet.add(<span class="string">"www"</span>); <span class="comment">//重复添加www</span></span><br><span class="line">linkedSet.add(<span class="string">"com"</span>);</span><br><span class="line">System.out.println(linkedSet);<span class="comment">//[www, iiswho, com] 有序不允许重复 HashSet是无序的不循序重复</span></span><br></pre></td></tr></table></figure><h2 id="Map-键值对"><a href="#Map-键值对" class="headerlink" title="Map(键值对)"></a>Map(键值对)</h2><h3 id="Map集合特点"><a href="#Map集合特点" class="headerlink" title="Map集合特点"></a>Map集合特点</h3><p>java.util.map&lt;k,v&gt;集合<br>​        1.Map集合中元素是一个双列集合,一个元素可以包含两个值(一个key,一个值)；<br>​        2.Map集合中的元素,key和value的数据类型可以相同，亦可以不同<br>​        3.Map集合中的元素,key是不允许重复的，value是允许重复的<br>​        4.Map集合中，key和value是一一对应的 </p><h4 id="HashMap集合的特点"><a href="#HashMap集合的特点" class="headerlink" title="HashMap集合的特点:"></a>HashMap集合的特点:</h4><p>java.util.HashMap&lt;k,v&gt;集合 implements Map&lt;k,v&gt; 接口<br>​            1.HashMap集合的底层是哈希表:查询速度快<br>​               jdk1.8之前:数组+单向链表<br>​               jdk1.8之前:数组+单向链表/红黑树(链表的长度超过8);提高查询速度<br>​            2.HashMap集合是一个无序的集合，存储元素和取出元素的顺序有可能不一致</p><h4 id="LinkedHashMap特点"><a href="#LinkedHashMap特点" class="headerlink" title="LinkedHashMap特点:"></a>LinkedHashMap特点:</h4><p>java.util.linkedHashMap&lt;k,v&gt; extends HashMap&lt;k,v&gt; 集合<br>​           1.linkedHashMap底层是哈希表+链表<br>​           2.linkedHashMap集合是一个有序集合，存储元素和取出元素是一致的</p><h4 id="Map集合常用方法"><a href="#Map集合常用方法" class="headerlink" title="Map集合常用方法"></a>Map集合常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*public V put(K key,V value) -将指定的键和指定的值添加到map集合中</span></span><br><span class="line"><span class="comment">*   当存储键值对时,key不重复返回V时null,key重复时,会使用新的value替换重复的value值,返回被替换的value</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">Map&lt;String,String&gt; map=<span class="keyword">new</span> HashMap();</span><br><span class="line">String str=map.put(<span class="string">"1"</span>,<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(str);  <span class="comment">//null</span></span><br><span class="line">str=map.put(<span class="string">"1"</span>,<span class="string">"world"</span>);</span><br><span class="line">System.out.println(str);  <span class="comment">//hello</span></span><br><span class="line">str=map.put(<span class="string">"2"</span>,<span class="string">"!!!"</span>);</span><br><span class="line">System.out.println(map); <span class="comment">//&#123;1=world, 2=!!!&#125;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public V remove(object key)</span></span><br><span class="line"><span class="comment"> *   把指定的键对应的键值对元素在map集合中删除，返回被删除的元素，key存在V返回被删除的值，不存在返回null</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">str=map.remove(<span class="string">"!!!"</span>);</span><br><span class="line">System.out.println(str); <span class="comment">//null</span></span><br><span class="line">str=map.remove(<span class="string">"2"</span>);</span><br><span class="line">System.out.println(str); <span class="comment">//!!!</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* public V get(K key): 根据指定值键在map集合中获取对应的值</span></span><br><span class="line"><span class="comment">*    key存在返回对应的的值，不存在返回nul</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">str=map.get(<span class="string">"1"</span>);</span><br><span class="line">System.out.println(str); <span class="comment">//world</span></span><br><span class="line"><span class="comment">//public boolean containsKey(Object key)  判断集合中是否包含指定的键</span></span><br><span class="line">System.out.println(map.containsKey(<span class="string">"1"</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 遍历Map集合 将Map集合中的Key取出放到Set集合中，使用迭代器遍历Set集合获取每一个key对应的值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">map.put(<span class="string">"遍历"</span>,<span class="string">"set"</span>);</span><br><span class="line">map.put(<span class="string">"键"</span>,<span class="string">"值"</span>);</span><br><span class="line"> <span class="comment">//keySet() 将Map集合中的Key取出放到Set集合中</span></span><br><span class="line">Set set=map.keySet();</span><br><span class="line">Iterator&lt;String&gt; iterator=set.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        String key=iterator.next();</span><br><span class="line">     System.out.println(key+<span class="string">":"</span>+map.get(key));<span class="comment">//1:world 遍历:set  键:值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Collection&quot;&gt;&lt;a href=&quot;#Collection&quot; class=&quot;headerlink&quot; title=&quot;Collection&quot;&gt;&lt;/a&gt;Collection&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/09/30/Java中常用集合分类及其常用方
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>String类常用方法</title>
    <link href="http://yoursite.com/2020/09/24/String%E7%B1%BB%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/09/24/String%E7%B1%BB%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2020-09-24T12:05:12.000Z</published>
    <updated>2020-09-24T12:05:53.364Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String类常用方法"><a href="#String类常用方法" class="headerlink" title="String类常用方法"></a>String类常用方法</h3><p>java.long.String 包<br>特点：<br>1.程序中任何“ ”字符串都是String类的实列对象<br>2.字符串不变; 它们的值在创建后不能被更改。<br>3.字符串缓冲区支持可变字符串因，为String对象是不可变的，它们可以被共享。<br>4.字符串效果上时char[]字符数组，但底层原理时byte[]字节数组<br>常见创建字符串的3+1种类方式:<br>三种构造方法:<br>    public String();    创建一个空白字符串<br>    public String(char[] String );     根据字符数组中的内容，来创建对应的字符串<br>    public String(byte[] String);      根据字节数组中的内容，来创建对应的字符串<br> 一种直接创建:<br>    String str=”Hello”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//空参构造</span></span><br><span class="line">      String str1=<span class="keyword">new</span> String();</span><br><span class="line">      System.out.println(str1);</span><br><span class="line">      <span class="comment">//字符数组构造</span></span><br><span class="line">      <span class="keyword">char</span>[] charArray=<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'H'</span>,<span class="string">'E'</span>,<span class="string">'L'</span>,<span class="string">'L'</span>,<span class="string">'O'</span>&#125;;</span><br><span class="line">      String str2=<span class="keyword">new</span> String(charArray);</span><br><span class="line">      System.out.println(str2);</span><br><span class="line">      <span class="comment">//字节数组构造</span></span><br><span class="line">      <span class="keyword">byte</span>[] byteArray=&#123;<span class="string">'W'</span>,<span class="string">'O'</span>,<span class="string">'R'</span>,<span class="string">'L'</span>,<span class="string">'D'</span>&#125;;</span><br><span class="line">      String str3=<span class="keyword">new</span> String(byteArray);</span><br><span class="line">      System.out.println(str3);</span><br><span class="line">      <span class="comment">//直接创建</span></span><br><span class="line">      String str4=<span class="string">"I"</span>;</span><br><span class="line">      System.out.println(str4);</span><br></pre></td></tr></table></figure><font dace="黑体" color="red" size="3">字符串常量池:程序中直接写上双引号的字符串，就在字符串常量池中.</font><font dace="黑体" color="red" size="3">        对于基本类型来说，==是进行数值的比较</font><font dace="黑体" color="red" size="3">        对于引用类型来说，==是进行【地址值】的比较</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str1 =&quot;abc&quot;;</span><br><span class="line">      String str2 =&quot;abc&quot;;</span><br><span class="line">      char[] charArray=&#123;&apos;a&apos;,&apos;b&apos;,&apos;c&apos;&#125;;</span><br><span class="line">      String str3=new String(charArray);</span><br><span class="line">      System.out.println(str1==str2); //true</span><br><span class="line">      System.out.println(str1==str3); //false</span><br><span class="line">      System.out.println(str2==str3); //false</span><br></pre></td></tr></table></figure><p><img src="/images/String.png" alt="程序运行图"></p><p>字符串内容比较：<br>        public boolean equals(Object obj);参数可以是任何对象，只有一个参数是一个字符串并且内容相同<br>        才会给true 否则返回false。<br>        <font dace="黑体" color="red" size="3">注意：</font><br>           <font dace="黑体" color="red" size="3">1.equals方法具有对称性，a.equals(b)和b.equals(a)效果一样</font><br>           <font dace="黑体" color="red" size="3">2.如果比较双方一个常量一个变量，推荐把常量放在前  “abc”.equals(str),否则容易空指针异样</font><br>        public boolean equalsIgnoreCase(Object obj); 忽略大小写，进行内容比较</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String str1 =&quot;abc&quot;;</span><br><span class="line">   String str2 =&quot;abc&quot;;</span><br><span class="line">   char[] charArray=&#123;&apos;a&apos;,&apos;b&apos;,&apos;c&apos;&#125;;</span><br><span class="line">   String str3=new String(charArray);</span><br><span class="line">   System.out.println(str1.equals(str2)); //true</span><br><span class="line">   System.out.println(str1.equals(str3)); //true</span><br><span class="line">   System.out.println(str2.equals(str3)); //true</span><br><span class="line">   System.out.println(&quot;abc&quot;.equals(str2)); //true</span><br><span class="line">   //equalsIgnoreCase</span><br><span class="line">   String str4 =&quot;ABC&quot;;</span><br><span class="line">   System.out.println(str4.equals(str2)); //fasle,区分大小写</span><br><span class="line">   System.out.println(str4.equalsIgnoreCase(str2)); //true,忽略大小写</span><br></pre></td></tr></table></figure><h5 id="String-中常用的方法"><a href="#String-中常用的方法" class="headerlink" title="String 中常用的方法:"></a>String 中常用的方法:</h5><p>​    public int length(); 获取当前字符串中的字符个数，拿到字符串长度<br>​    public String concat(String str); 将当前字符串和参数字符串拼接为新的字符串返回<br>​    public char charAt(int index); 获取指定索引位置的字符（索引从0开始）<br>​    public int indexOf(String str); 查找指定字符串在本字符串首次出现的索引位置，没有返回-1值</p><h6 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串:"></a>截取字符串:</h6><p>​    public String substring(int index);截取从参数位置一直到字符串末尾，返回新字符串<br>​    public String substring(int begin,int end)；截取从begin开始，直到end结束，中间的字符串。<br>​    [begin,end)此方法是左闭右开区间</p><h6 id="转换字符串"><a href="#转换字符串" class="headerlink" title="转换字符串:"></a>转换字符串:</h6><p>​    public char[] tocharArray();将当前字符串拆分成为字符数组作为返回值<br>​    public byte[] getBytes(); 获得当前字符串底层的字节数组.<br>​    public String  replace(CharSequence oldString,CharSequence new String);<br>​    将所有出现的老字符串替换为新的字符串，返回替换之后的新字符串,<br>​    CharSequence 值可以接收字符串类型</p><h6 id="切割字符串"><a href="#切割字符串" class="headerlink" title="切割字符串:"></a>切割字符串:</h6><p>​    public String[] split(String regex);按照指定规则将字符串分割为若干部分<br>​    <font dace="黑体" color="red" size="3">注意: splir方法的参数其实是一个”正则表达式”,如果按照英文”.”进行切分，必须写”\“ =&gt;”\.”</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">String str1=&quot;Hello&quot;;</span><br><span class="line">        String str2=&quot;World&quot;;</span><br><span class="line">        //获取字符串长度</span><br><span class="line">        System.out.println(&quot;str1字符串长度是:&quot;+str1.length());</span><br><span class="line">        //拼接字符串</span><br><span class="line">        System.out.println(str1); //Hello</span><br><span class="line">        System.out.println(str2); //World</span><br><span class="line">        System.out.println(str1.concat(str2)); //HelloWorld</span><br><span class="line">        //获取指定索引位置</span><br><span class="line">        System.out.println(str1.charAt(1)); //e</span><br><span class="line">        //查找指定位置字符串</span><br><span class="line">        System.out.println(str2.indexOf(&quot;r&quot;)); //2</span><br><span class="line">        //截取字符串</span><br><span class="line">        System.out.println(str1.substring(1)); //ello</span><br><span class="line">        System.out.println(str1.substring(1,3)); //el</span><br><span class="line">        //转换为字符数组</span><br><span class="line">        char[] chars=&quot;Hello&quot;.toCharArray();</span><br><span class="line">        System.out.println(chars[0]); //H</span><br><span class="line">        System.out.println(chars.length); //5</span><br><span class="line">        //转换为字节数组</span><br><span class="line">        byte[] bytes = &quot;abc&quot;.getBytes();</span><br><span class="line">        for (int i = 0; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            System.out.println(bytes[i]); // 97 98 99</span><br><span class="line">        &#125;</span><br><span class="line">        //字符串替换</span><br><span class="line">        String string=&quot;i am china&quot;;</span><br><span class="line">        System.out.println(string.replace(&quot;am&quot;,&quot;love&quot;));// i love china</span><br><span class="line">        //分割字符串</span><br><span class="line">        String str5=&quot;abc,def,ghl&quot;;</span><br><span class="line">        String[] strings=str5.split(&quot;,&quot;);</span><br><span class="line">        for (int i = 0; i &lt; strings.length; i++) &#123; //abc  def ghl</span><br><span class="line">            System.out.println(strings[i]);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;String类常用方法&quot;&gt;&lt;a href=&quot;#String类常用方法&quot; class=&quot;headerlink&quot; title=&quot;String类常用方法&quot;&gt;&lt;/a&gt;String类常用方法&lt;/h3&gt;&lt;p&gt;java.long.String 包&lt;br&gt;特点：&lt;br&gt;1.程序中
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Array/ArrarList 常用方法</title>
    <link href="http://yoursite.com/2020/09/23/Array-ArrarList-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/09/23/Array-ArrarList-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2020-09-23T12:54:31.000Z</published>
    <updated>2020-09-30T06:15:34.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Array-ArrayList-基本使用"><a href="#Array-ArrayList-基本使用" class="headerlink" title="Array / ArrayList 基本使用"></a>Array / ArrayList 基本使用</h2><font dace="黑体" color="red" size="3">注意程序运行时堆,栈,方法区的变化:</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* Java的内存划分为5个部分:</span><br><span class="line">* 1.栈(Stack):存放的都是方法中的局部变量</span><br><span class="line">*           局部变量：方法的参数或者是方法&#123;&#125;中的变量</span><br><span class="line">*           作用域: 一旦超出作用域，立刻从栈中消失</span><br><span class="line">* 2.堆(Heap):凡是new出的东西都在堆当中</span><br><span class="line">*           堆内存中的东西都有一个地址值：16进制</span><br><span class="line">*           堆内存中的数据默认都有值。规则：</span><br><span class="line">*               整数      默认：0</span><br><span class="line">*               浮点数    默认：0.0</span><br><span class="line">*               字符      默认：&apos;\u0000&apos;</span><br><span class="line">*               布尔      默认：false</span><br><span class="line">*               引用类型    默认：null</span><br><span class="line">*</span><br><span class="line">* 3.方法区(Method Area): 存储class相关信息。包含方法的信息</span><br><span class="line">* 4.本地方法栈(Native Method Stack):与操作系统相关</span><br><span class="line">* 5.寄存器(pc Register): 与cpu相关</span><br></pre></td></tr></table></figure><p>补充：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java四类八种基本数据类型 度量单位均为字节</span><br><span class="line">第一类：整型 byte 1  short 2 int4 long8</span><br><span class="line">第二类：浮点型 float4 double8</span><br><span class="line">第三类：逻辑型 boolean(它只有两个值可取true false) 1/8字节</span><br><span class="line">第四类：字符型 char</span><br></pre></td></tr></table></figure><h3 id="Array基本用法"><a href="#Array基本用法" class="headerlink" title="Array基本用法"></a>Array基本用法</h3><p>数组是一组容器，用来存放多个数据值<br>特点：</p><p>  1.数组是一种引用数据类型</p><p>  2.数组中的多个数据类型类型必须统一</p><p>  3.数组的长度在程序运行期间不能改变   </p><p>  两种初始化方式：<br>  1）动态初始化   数据类型[] 数组名称=new 数据类型[组数长度]<br>  2）静态初始化   数据类型 数组名称=new 数据类型{元素1,元素2,….};</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义声明</span></span><br><span class="line">String[] str=<span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span>[] array=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>,<span class="number">15</span>,<span class="number">35</span>,<span class="number">6</span>,<span class="number">78</span>,<span class="number">66</span>&#125;;</span><br><span class="line"><span class="keyword">byte</span>[] bytes=&#123;<span class="string">'1'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最大值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span>  <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&gt;arr[max])&#123;</span><br><span class="line">max=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="keyword">return</span> arr[max];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最小值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span>  <span class="title">getMin</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> min=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&lt;arr[min])&#123;</span><br><span class="line">min=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="keyword">return</span> arr[min];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectBort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;arr.length;x++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> y=x+<span class="number">1</span>;y&lt;arr.length;y++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(arr[x]&gt;arr[y])&#123;</span><br><span class="line">swap(arr,x,y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp=arr[a];</span><br><span class="line">arr[a]=arr[b];</span><br><span class="line">arr[b]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 稀疏数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[][] arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">arr[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">10</span>;</span><br><span class="line">arr[<span class="number">5</span>][<span class="number">7</span>]=<span class="number">35</span>;</span><br><span class="line">arr[<span class="number">6</span>][<span class="number">2</span>]=<span class="number">12</span>;</span><br><span class="line"> <span class="comment">//输出稀疏数组</span></span><br><span class="line">System.out.println(<span class="string">"输出原始数组:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] i:arr) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j:i) &#123;</span><br><span class="line">      System.out.printf(j+<span class="string">"\t"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">      System.out.println(<span class="string">""</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//压缩为稀疏数组</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;arr.length ; i++) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;<span class="number">10</span> ; j++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (arr[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">             sum=sum+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"共有"</span>+sum+<span class="string">"个有效值."</span>);</span><br><span class="line"><span class="comment">//进行数组压缩</span></span><br><span class="line"><span class="keyword">int</span> [][] arr2=<span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">arr2[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line">arr2[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">10</span>;</span><br><span class="line">arr2[<span class="number">0</span>][<span class="number">2</span>]=sum;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;arr.length ; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;arr[i].length ; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">         arr2[count+<span class="number">1</span>][<span class="number">0</span>]=i;</span><br><span class="line">         arr2[count+<span class="number">1</span>][<span class="number">1</span>]=j;</span><br><span class="line">         arr2[count+<span class="number">1</span>][<span class="number">2</span>]=arr[i][j];</span><br><span class="line">         count++;</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> System.out.println(<span class="string">"输出稀疏数组:"</span>);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;arr2.length ; i++) &#123;</span><br><span class="line">    System.out.println(Arrays.toString(arr2[i]));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//将稀疏数组转化为数组输出</span></span><br><span class="line"> System.out.println(<span class="string">"将稀疏数组转化为数组:"</span>);</span><br><span class="line"> <span class="keyword">int</span>[][] arr3=<span class="keyword">new</span> <span class="keyword">int</span>[arr2[<span class="number">0</span>][<span class="number">0</span>]][arr2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;arr2.length ; i++) &#123;</span><br><span class="line">     arr3[arr2[i][<span class="number">0</span>]][arr2[i][<span class="number">1</span>]]=arr2[i][<span class="number">2</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;arr3.length ; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;arr3[i].length ; j++) &#123;</span><br><span class="line">      System.out.print(arr3[i][j]+<span class="string">"\t"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      System.out.println(<span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Scanner-键盘输入"><a href="#Scanner-键盘输入" class="headerlink" title="Scanner 键盘输入"></a>Scanner 键盘输入</h3><p>注意next与nextLine<br>    next方法不能包含空格，遇见空格认为结束。会一直等待用户输入字符，自动去掉用户输入字符之前的空格<br>    nextLine方法以enter作为结束标志，可以获得空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner=new Scanner(System.in);</span><br><span class="line">System.out.printf(scanner.next());</span><br><span class="line">scanner.close();</span><br></pre></td></tr></table></figure></p><h3 id="ArrayList基本用法"><a href="#ArrayList基本用法" class="headerlink" title="ArrayList基本用法"></a>ArrayList基本用法</h3><p>  1.数字长度可以任意变化<br>  2.<e>代表泛型，泛型也就是装在集合中的所有元素，全部都是统一的某种类型<br>  <font dace="黑体" color="red" size="3">注意：泛型只能是引用类型不能是基本类型</font><br>  3.对于ArrayList来说直接打印的得到的不是地址值而是内容，如果内容为空则打印[]<br>  4.ArrayList 底层是数据存储结构是数组，元素增删慢，查询快；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList=<span class="keyword">new</span> ArrayList();</span><br><span class="line">System.out.print(arrayList);</span><br><span class="line">arrayList.add(<span class="string">"hello world"</span>);</span><br><span class="line">System.out.print(arrayList);</span><br></pre></td></tr></table></figure></e></p><p>常用方法：</p><p>  1.public boolean add<e e=""> ;向集合中添加元素，参数类型和泛型保持一致<br>  <font dace="黑体" color="red" size="3">备注：对于array List元素来说，add添加元素是一定成功的，返回值可以不用， 其他集合的的add添加动作不一定成功.</font><br>  2.public E get(int index) ;从集合中获取元素，参数是索引编号，返回值就是对应位置的元素<br>  3.public E remove(int index) ; 从集合中删除元素，参数是索引编号，返回值就是被删除掉的元素<br>  4.public int size() ; 获取集合尺寸长度，返回值是集合中包含的元素个数</e></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> success=arrayList.add(<span class="string">"I am student"</span>);</span><br><span class="line">System.out.print(<span class="string">"添加的动作是否成功"</span>+success);</span><br><span class="line"><span class="comment">//从集合中获取元素：get.索引值从0开始.</span></span><br><span class="line">String string=arrayList.get(<span class="number">0</span>);</span><br><span class="line">System.out.printf(<span class="string">"从集合中获取的元素是:"</span>+string);</span><br><span class="line"><span class="comment">//从集合中删除元素:remove.</span></span><br><span class="line">String string2=arrayList.remove(<span class="number">0</span>);</span><br><span class="line">System.out.printf(<span class="string">"从集合中删除的元素是:"</span>+string2);</span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.size(); i++) &#123;</span><br><span class="line">            System.out.println(arrayList.get(i));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>ArrayList集合中若想存放基本数据类型，必须使用基本类型对应的包装类基本类型   包装类（引用类型，都位于java.long包下）<br>         byte    ==&gt;      Byte<br>         int     ==&gt;      Integer<br>         short   ==&gt;      Short<br>         long    ==&gt;      Long<br>         double  ==&gt;      Double<br>         float   ==&gt;      Float<br>         char    ==&gt;      Character<br>         boolean ==&gt;      Boolean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int 应用类型举例</span></span><br><span class="line">ArrayList&lt;Integer&gt; listInt=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">listInt.add(<span class="number">100</span>);</span><br><span class="line">listInt.add(<span class="number">300</span>);</span><br><span class="line">System.out.println(listInt.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Array-ArrayList-基本使用&quot;&gt;&lt;a href=&quot;#Array-ArrayList-基本使用&quot; class=&quot;headerlink&quot; title=&quot;Array / ArrayList 基本使用&quot;&gt;&lt;/a&gt;Array / ArrayList 基本使用&lt;/
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="http://yoursite.com/2020/09/22/Markdown/"/>
    <id>http://yoursite.com/2020/09/22/Markdown/</id>
    <published>2020-09-22T04:24:37.000Z</published>
    <updated>2020-10-08T13:42:02.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="markdown-常用小技巧"><a href="#markdown-常用小技巧" class="headerlink" title="markdown 常用小技巧"></a>markdown 常用小技巧</h2><p>1.通过 #号+空格 表示标题 1-6级(几级标题几个#号)</p><h1 id="iiswho-cn"><a href="#iiswho-cn" class="headerlink" title="iiswho.cn"></a>iiswho.cn</h1><h2 id="IISWHO-CN"><a href="#IISWHO-CN" class="headerlink" title="IISWHO.CN"></a>IISWHO.CN</h2><h3 id="iiswho-cn-1"><a href="#iiswho-cn-1" class="headerlink" title="iiswho.cn"></a>iiswho.cn</h3><h4 id="iiswho-cn-2"><a href="#iiswho-cn-2" class="headerlink" title="iiswho.cn"></a>iiswho.cn</h4><p>2.更改字体，大小，颜色</p><p>​    1)粗体 : <code>**iiswho.cn**</code> </p><p>​    <strong>iiswho.cn</strong></p><p>​    2)斜体: <code>*iiswho.cn*</code></p><p>​    <em>iiswho.cn</em>  </p><p>​    3) &gt;+空格 引用效果</p><blockquote><p>此文章来源于iiswho.cn                  </p></blockquote><p>​    4)分割线”- - -“或者”***”</p><hr><p>​    5）居中显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>居中的内容<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>居中设置大小&lt;center&gt;&lt;font size=4&gt;设置居中内容的大小&lt;/font&gt;&lt;/center&gt;   </code></pre><p>​    6)换行 :使用br标签 或者末尾敲两个空格然后回车</p><p>​    7)精确设置字体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face=&quot;黑体&quot; color=blue size=5&gt;我是黑体，蓝色，尺寸为5&lt;/font&gt;</span><br></pre></td></tr></table></figure><font face="黑体" color="blue" size="5">我是黑体，蓝色，尺寸为5</font><p>4.图片<br>    <code>![图片名称] (图片地址/本地网络均可)  注意：如若想设置如片大小可添加div容器进行设置</code></p><div style="width :75px; hight: 75px;margin: auto"><img src="/images/小新7.jpg" alt="我的头像"></div><p>5.超链接<br>     <code>[链接标题] (链接地址)</code><br>​    <a href="iiswho.cn">我的博客</a>  </p><p>6.列表</p><p>​    1)有序: 1.空格</p><p>​    2)无序: ‘-‘+空格</p><p>7.代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">​```+编写语言:</span><br><span class="line">This is java</span><br></pre></td></tr></table></figure><p>8.空格(一个汉字两耳光字符/空格)</p><p>1)一个空格大小的表示：&amp;ensp+;或&amp;#8194+;。</p><p>2)&amp;emsp+;使用2个即可缩进2个汉字。</p><p>3)不换行空格：&amp;nbsp+;或&amp;#160+;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;markdown-常用小技巧&quot;&gt;&lt;a href=&quot;#markdown-常用小技巧&quot; class=&quot;headerlink&quot; title=&quot;markdown 常用小技巧&quot;&gt;&lt;/a&gt;markdown 常用小技巧&lt;/h2&gt;&lt;p&gt;1.通过 #号+空格 表示标题 1-6级(几
      
    
    </summary>
    
    
    
      <category term="Compiler tools" scheme="http://yoursite.com/tags/Compiler-tools/"/>
    
  </entry>
  
  <entry>
    <title>idea test</title>
    <link href="http://yoursite.com/2019/12/03/idea%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/12/03/idea%E6%B5%8B%E8%AF%95/</id>
    <published>2019-12-03T13:46:36.192Z</published>
    <updated>2020-09-22T04:46:16.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新提示"><a href="#更新提示" class="headerlink" title="更新提示"></a>更新提示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot;  #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; # 新建页面</span><br><span class="line">hexo generate # 生成静态页面至public目录</span><br><span class="line">hexo server # 启动服务器(默认端口4000，&apos;ctrl+c&apos;关闭server)</span><br><span class="line">hexo deploy # 项目部署</span><br><span class="line">hexo help # 查看帮助</span><br><span class="line">hexo version # 查看Hexo的版本</span><br><span class="line">hexo clean # 清除Hexo的缓存</span><br></pre></td></tr></table></figure><p>###上边的一些命令可以使用简写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><h3 id="本地调试三连"><a href="#本地调试三连" class="headerlink" title="本地调试三连"></a>本地调试三连</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure><p>###远程部署三连<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;更新提示&quot;&gt;&lt;a href=&quot;#更新提示&quot; class=&quot;headerlink&quot; title=&quot;更新提示&quot;&gt;&lt;/a&gt;更新提示&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
    
      <category term="Compiler tools" scheme="http://yoursite.com/tags/Compiler-tools/"/>
    
  </entry>
  
  <entry>
    <title>Centos7配置Jdk1.8及搭建Tomcat服务</title>
    <link href="http://yoursite.com/2018/06/03/Centos7%E9%85%8D%E7%BD%AEJdk1-8%E5%8F%8A%E6%90%AD%E5%BB%BATomcat%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/06/03/Centos7%E9%85%8D%E7%BD%AEJdk1-8%E5%8F%8A%E6%90%AD%E5%BB%BATomcat%E6%9C%8D%E5%8A%A1/</id>
    <published>2018-06-03T11:31:00.000Z</published>
    <updated>2020-09-22T04:43:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-Java-JDK1-8配置-Coentos-7"><a href="#一-Java-JDK1-8配置-Coentos-7" class="headerlink" title="一. Java JDK1.8配置(Coentos 7)"></a>一. Java JDK1.8配置(Coentos 7)</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>下载 FileZilla(官网的绿色版完全免费)<br>    下载 jdk1.8安装包 tar.gz(Linux下压缩格式)<br>利用 FileZilla文件传输软件将下载好的压缩包传送到服务器</p><h3 id="云服务器端配置-xxx均为自己的文件名"><a href="#云服务器端配置-xxx均为自己的文件名" class="headerlink" title="云服务器端配置(xxx均为自己的文件名)"></a>云服务器端配置(xxx均为自己的文件名)</h3><p>1.在usr/local/目录下 建立 services/jdk8 目录.<br>2.解压文件在jdk目录下   使用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zvxf xxx.tar.gz</span><br></pre></td></tr></table></figure></p><p>3.解压完成后java 命令可以使用  javac 需要配置环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">在文件最后加入</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/services/jdk8（jdk的绝对路径）</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure></p><p>到此 javac 测试 没问题就是配置成功</p><h2 id="二-在centos7-中安装tomcat"><a href="#二-在centos7-中安装tomcat" class="headerlink" title="二.在centos7 中安装tomcat"></a>二.在centos7 中安装tomcat</h2><h3 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h3><pre><code>下载 tomcat安装包 tar.gz</code></pre><p>利用 FileZilla 将下载好的压缩包传送到服务器</p><h3 id="云服务器端配置"><a href="#云服务器端配置" class="headerlink" title="云服务器端配置"></a>云服务器端配置</h3><p>1.服务器端 在home目录下新建tomcat目录<br>2.解压文件在tomcat目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zvxf xxx.tar.gz</span><br></pre></td></tr></table></figure></p><p>3.在解压好的apache-tomcat目录下的bin目录启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh home/tomcat/apache-tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure></p><p>4.这是侯8080端口应该是启动的。使用命令查看<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lntup | grep <span class="string">"8080"</span></span><br></pre></td></tr></table></figure></p><p>5.这时候通过http://服务公网ip地址:8080 可以访问到的。<br>如果还是访问查看防火墙是否关闭，服务器入站规则是否将8080端口加入。<br>入站规则配置可以查看相关服务器的官方帮助文档。</p><p><a href="https://help.aliyun.com/document_detail/25475.html" target="_blank" rel="noopener">阿里云</a></p><p><a href="https://cloud.tencent.com/document/product/213/2502" target="_blank" rel="noopener">腾讯云</a></p><h2 id="防火墙相关命令"><a href="#防火墙相关命令" class="headerlink" title="防火墙相关命令"></a>防火墙相关命令</h2><p>1.防火墙开/关：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure><p>2.查看防火墙状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure></p><p>3.开放8080端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">public 作用范围  port 开放端口号  permanent永久生效（不设定此参数重启失效）</span><br></pre></td></tr></table></figure></p><p>4.查看所有开放端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-Java-JDK1-8配置-Coentos-7&quot;&gt;&lt;a href=&quot;#一-Java-JDK1-8配置-Coentos-7&quot; class=&quot;headerlink&quot; title=&quot;一. Java JDK1.8配置(Coentos 7)&quot;&gt;&lt;/a&gt;一. Java J
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>测试第一篇</title>
    <link href="http://yoursite.com/2018/05/27/%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>http://yoursite.com/2018/05/27/%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%B8%80%E7%AF%87/</id>
    <published>2018-05-27T07:41:01.000Z</published>
    <updated>2018-06-03T10:03:56.710Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是搭建好hexo后的第一篇文章</code></pre><h3 id="下面做个代码测试"><a href="#下面做个代码测试" class="headerlink" title="下面做个代码测试"></a>下面做个代码测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void main(String[] agrs)&#123;</span><br><span class="line">System.out.println(<span class="string">"hellw world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><pre><code>本次测试到此结束</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;这是搭建好hexo后的第一篇文章
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;下面做个代码测试&quot;&gt;&lt;a href=&quot;#下面做个代码测试&quot; class=&quot;headerlink&quot; title=&quot;下面做个代码测试&quot;&gt;&lt;/a&gt;下面做个代码测试&lt;/h3&gt;&lt;figure 
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
